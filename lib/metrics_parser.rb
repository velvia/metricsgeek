# Core functions for parsing metrics from JSON web output, such as that by Coda Hale's metrics library

module MetricsParser
  # @param tree A hash tree such as that generated by JSON.parse()
  # @param prefix A list of namespace strings to prefix the generated keys by
  # @returns A flattened hash where the key is each level of the tree joined by '.'
  def self.flatten_tree(json_tree, prefix=[])
    flat_tree = {}
    pairs = json_tree.each do |key, value|
      newkey = (prefix + [key]).join(".")
      flat_tree[newkey] = value
      if value.is_a?(Hash)
        flat_tree.update(MetricsParser.flatten_tree(value, prefix + [key]))
      end
    end
    flat_tree
  end

  # @returns a list of sorted, flattened hash keys for the input JSON hash tree
  def self.list_keys_for_hash(json_tree)
    self.flatten_tree(json_tree).keys.sort
  end

  # @returns a set of flattened hash keys that's the union of the individual flat hash keys for each JSON blob
  def self.list_keys_for_hashes(json_trees)
    json_trees.map { |tree| self.flatten_tree(tree).keys }.flatten.uniq.sort
  end

  # @param json_tree As returned by JSON,parse()
  # @param key_patterns a list of glob pattern strings for matching keys
  # @returns a hash of flat_key to value for all keys matching any of the key_patterns
  def self.glob_key_values(json_tree, key_patterns)
    matches = {}
    flat_tree = flatten_tree(json_tree)
    key_patterns.each do |key_pattern|
      matching_keys = flat_tree.keys.select { |key| File.fnmatch(key_pattern, key) }
      matches.merge!(Hash[ matching_keys.map { |key| [key, flat_tree[key]] } ])
    end
    matches
  end
end