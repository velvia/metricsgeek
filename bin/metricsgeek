#!/usr/bin/env ruby
require "trollop"
require "metricsgeek"

opts = Trollop::options do
  opt :select, "metrics keys or key glob patterns, comma separated", :type => :string
  opt :from, "host names, comma separated, may contain [1..10] ranges", :type => :string
  opt :port, "port #", :default => 7000
  opt :route, "JSON metrics route", :default => "metricz"
  opt :list_keys, "Just list the keys"
  opt :group, "Group metrics from hosts using min/max/avg/sum", :type => :string
  opt :timeout, "Request timeout in seconds", :type => :int
end

class Array
  def sum
    self.inject(0) { |a, s| a + s }
  end

  def avg
    self.sum * 1.0 / self.length
  end
end

def format(number)
  "%7.3f" % [number] rescue number
end

json_trees = MetricsDownloader.parse_json_from(MetricsDownloader.split_host_exprs(opts[:from]),
                                               opts[:port], opts[:route],
                                               opts[:timeout])

if opts[:list_keys]
  MetricsParser.list_keys_for_hashes(json_trees.values).each { |key| puts key }
else
  keys = opts[:select].split(",")
  host_key_value = json_trees.map do |host, json_tree|
    matching_key_values = MetricsParser.glob_key_values(json_tree, keys)
    matching_key_values.map do |flatkey, value|
      {:host => host, :key => flatkey, :value => value}
    end
  end.flatten
  host_key_value.group_by { |hash| hash[:key] }.each do |key, hashes|
    puts "\n\nFor key: #{key}"
    if opts[:group]
      values = hashes.map { |h| h[:value] }
      opts[:group].split(",").each { |func| puts "  #{func}: #{format(values.send(func.to_sym))}" }
    else
      hashes.each { |h| puts "  #{h[:host]}\t#{format(h[:value])}"}
    end
  end
end
